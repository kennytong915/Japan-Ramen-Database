# Docker-specific configuration
spring.application.name=japanramendirectory

# Database Configuration for Docker
spring.datasource.url=${DOCKER_DATASOURCE_URL:jdbc:mysql://mysql:3306/ramen_directory?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:root}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:915hokanihateyou}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA / Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

# Server Configuration
server.port=${SERVER_PORT:8080}

# Logging Configuration for Docker
logging.level.root=${LOGGING_LEVEL_ROOT:INFO}
logging.level.org.springframework.web=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB:INFO}
logging.level.org.hibernate=${LOGGING_LEVEL_ORG_HIBERNATE:ERROR}
logging.level.com.ramendirectory=${DOCKER_LOGGING_LEVEL_COM_RAMENDIRECTORY:INFO}

# Log format for Docker
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n

# Application-specific Configuration
app.security.jwt.expiration=${APP_SECURITY_JWT_EXPIRATION:86400000}
app.pagination.default-page-size=${APP_PAGINATION_DEFAULT_PAGE_SIZE:20}
app.service.cache-ttl=${APP_SERVICE_CACHE_TTL:3600}

# RSA key configuration
rsa.private-key=classpath:certs/private.pem
rsa.public-key=classpath:certs/public.pem

# Admin user initialization
admin.username=${ADMIN_USERNAME:admin}
admin.email=${ADMIN_EMAIL:admin@example.com}
admin.password=${ADMIN_PASSWORD:adminSecurePassword123!}

# Account lockout configuration
security.max-failed-attempts=${SECURITY_MAX_FAILED_ATTEMPTS:5}
security.lock-time-duration=${SECURITY_LOCK_TIME_DURATION:15}

# reCAPTCHA configuration
google.recaptcha.key.site=${DOCKER_RECAPTCHA_KEY_SITE}
google.recaptcha.key.secret=${DOCKER_RECAPTCHA_KEY_SECRET}
google.recaptcha.url=https://www.google.com/recaptcha/api/siteverify

# Rate limiting configuration for user registration
rate.limit.capacity=${RATE_LIMIT_CAPACITY:5}
rate.limit.refill=${RATE_LIMIT_REFILL:10}

# Rate limiting configuration for comments
comment.rate.limit.capacity=${COMMENT_RATE_LIMIT_CAPACITY:10}
comment.rate.limit.refill=${COMMENT_RATE_LIMIT_REFILL:5}

# AWS S3 Configuration
aws.s3.bucket-name=${AWS_S3_BUCKET_NAME:japanramendirectory}
aws.s3.region=${AWS_S3_REGION:ap-southeast-2}
aws.s3.access-key=${DOCKER_AWS_S3_ACCESS_KEY}
aws.s3.secret-key=${DOCKER_AWS_S3_SECRET_KEY}

# File Upload Configuration
spring.servlet.multipart.max-file-size=${SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE:10MB}
spring.servlet.multipart.max-request-size=${SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE:10MB}

# Comment Photo Configuration
app.comment.max-photos=${APP_COMMENT_MAX_PHOTOS:7}
app.comment.allowed-content-types=${APP_COMMENT_ALLOWED_CONTENT_TYPES:image/jpeg,image/png,image/jpg}

# CORS configuration for Docker
spring.web.cors.allowed-origins=${SPRING_WEB_CORS_ALLOWED_ORIGINS:http://localhost:3000,http://frontend:80}
spring.web.cors.allowed-methods=${SPRING_WEB_CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
spring.web.cors.allowed-headers=${SPRING_WEB_CORS_ALLOWED_HEADERS:*}
spring.web.cors.allow-credentials=${SPRING_WEB_CORS_ALLOW_CREDENTIALS:true} 